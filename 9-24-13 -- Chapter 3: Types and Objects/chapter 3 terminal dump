This is a dump of the interactive interpreter session from Learn Python Tuesday Sep 24.

>>> print 'hello world'
hello world
>>> 5 
5
>>> 3
3
>>> 5 + 3
8
>>> int
<type 'int'>
>>> type(15)
<type 'int'>
>>> type('hello world')
<type 'str'>
>>> type([1,2,3,4,5])
<type 'list'>
>>> isinstance(5,int)
True
>>> isinstance(5,str)
False
>>> x = 15
>>> x
15
>>> y = 'hello world'
>>> x
15
>>> isinstance(x,int)
True
>>> type(x)
<type 'int'>
>>> typex = _
>>> typex
<type 'int'>
>>> print str(typex)
<type 'int'>
>>> 
>>> 
>>> 
>>> 
>>> 
>>> x = 3 + 4j
>>> x
(3+4j)
>>> x.real
3.0
>>> x.imag
4.0
>>> obj1 = [1,2,3,4,5]
>>> obj1
[1, 2, 3, 4, 5]
>>> obj1.append(6)
>>> obj1
[1, 2, 3, 4, 5, 6]
>>> str1 = "12345"
>>> str1.append(6)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'str' object has no attribute 'append'
>>> str1 += '6'
>>> str1
'123456'
>>> id(str1)
4436853504
>>> obj1
[1, 2, 3, 4, 5, 6]
>>> id(obj1)
4436623160
>>> obj1.append(7)
>>> obj1
[1, 2, 3, 4, 5, 6, 7]
>>> id(obj1)
4436623160
>>> str1
'123456'
>>> id(str1)
4436853504
>>> str1 += '7'
>>> str1
'1234567'
>>> id(str1)
4436853504
>>> L = [1,2,3,4,5]
>>> L.append(6)
>>> L
[1, 2, 3, 4, 5, 6]
>>> T = (1,2,3,4,5)
>>> T[0]
1
>>> T[1]
2
>>> T[2]
3
>>> T.append(6)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'append'
>>> D = {}
>>> D['alligator'] = 'giant lizard'
>>> D['washing machine'] = 'useful timesaver'
>>> D
{'alligator': 'giant lizard', 'washing machine': 'useful timesaver'}
>>> D[(1,2,3,4,5)] = 'a tuple we know and love'
>>> D
{'alligator': 'giant lizard', (1, 2, 3, 4, 5): 'a tuple we know and love', 'washing machine': 'useful timesaver'}
>>> D[ [1,2,3,4,5] ] = 'a list that\'s not going to be accepted'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> str1 = '12345'
>>> str2 = str1 + '6'
>>> id(str2)
4436853696
>>> id(str1)
4436853552
>>> v = 'hello world'
>>> v[0] = 'y'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> v = list(v)
>>> v
['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']
>>> v[0] = 'y'
>>> v
['y', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']
>>> ''.join(v)
'yello world'
>>> 
>>> 
>>> 
>>> 7
7
>>> True
True
>>> 'yo yo yo'
'yo yo yo'
>>> None
>>> None
>>> 15
15
>>> type(_)
<type 'int'>
>>> 1523456765123656234765716253
1523456765123656234765716253L
>>> type(_)
<type 'long'>
>>> 3.2
3.2
>>> type(3.2)
<type 'float'>
>>> 3.23465765487623584765287365872346587263458726534762534
3.234657654876236
>>> strang = 'abcdefghij'
>>> strang[0]
'a'
>>> strang[1]
'b'
>>> strang[2]
'c'
>>> strang = 'hello'
>>> strang[0]
'h'
>>> strang[1]
'e'
>>> strang[2]
'l'
>>> strang[0:2]
'he'
>>> strang[0:3]
'hel'
>>> strang[0:5]
'hello'
>>> strang[4:5]
'o'
>>> strang[3:5]
'lo'
>>> mylist = ['h','e','l','l','o']
>>> mylist[3:5]
['l', 'o']
>>> mylist[0:5]
['h', 'e', 'l', 'l', 'o']
>>> mylist[0:5:2]
['h', 'l', 'o']
>>> len(mylist)
5
>>> min(mylist)
'e'
>>> max(mylist)
'o'
>>> sum(mylist)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'str'
>>> numbers = [1,6,4,5,3,4]
>>> sum(numbers)
23
>>> import random
>>> random.choice(numbers)
6
>>> random.choice(numbers)
3
>>> random.choice(numbers)
3
>>> random.choice(numbers)
4
>>> random.choice(numbers)
3
>>> random.choice(numbers)
6
>>> random.choice(numbers)
5
>>> any([False,False,False,False,False])
False
>>> any([False,False,False,True,False])
True
>>> all([False,False,False,True,False])
False
>>> all([False,False,False,True,True])
False
>>> all([False,False,True,True,True])
False
>>> all([True,True,True,True,True])
True
>>> x = 6
>>> all([True,True,x == 4,x == 6,True])
False
>>> any([True,True,x == 4,x == 6,True])
True
>>> all([True,True,x == 6,x == 6,True])
True
>>> all([True,True,x == 6,6,True])
True
>>> all([True,True,x == 6,0,True])
False
>>> mylist
['h', 'e', 'l', 'l', 'o']
>>> mylist[1] = 'E'
>>> mylist
['h', 'E', 'l', 'l', 'o']
>>> mylist[2:4] = ['l','l','l','l','l','l','l']
>>> mylist
['h', 'E', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'o']
>>> del mylist[0]
>>> mylist
['E', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'o']
>>> del mylist[1:8]
>>> mylist
['E', 'o']
>>> mylist.extend(['a','whole','list'])
>>> mylist
['E', 'o', 'a', 'whole', 'list']
>>> mylist.count('a')
1
>>> mylist.append('a')
>>> mylist
['E', 'o', 'a', 'whole', 'list', 'a']
>>> mylist.count('a')
2
>>> a = "Your name is {0} and your age is {age}"
>>> a
'Your name is {0} and your age is {age}'
>>> a.format('Bob',31)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'age'
>>> a.format('Bob',age=31)
'Your name is Bob and your age is 31'
>>> a = "{0} {1} {2} {3}"
>>> a.format('hey','there','this is','cool')
'hey there this is cool'
>>> a = "{3} {1} {2} {0}"
>>> a.format('hey','there','this is','cool')
'cool there this is hey'
>>> a = "Hello {name}, you seem {adjective} today."
>>> a
'Hello {name}, you seem {adjective} today.'
>>> a.format(name='Elvis',adjective='dead')
'Hello Elvis, you seem dead today.'
>>> str1 = 'hello'
>>> str1.capitalize()
'Hello'
>>> str1.upper()
'HELLO'
>>> str1.lower()
'hello'
>>> D   
{'alligator': 'giant lizard', (1, 2, 3, 4, 5): 'a tuple we know and love', 'washing machine': 'useful timesaver'}
>>> D['alligator']
'giant lizard'
>>> D['alligator'] = ['giant lizard','eats people who get too close']
>>> D['alligator']
['giant lizard', 'eats people who get too close']
>>> len(D)
3
>>> D.keys()
['alligator', (1, 2, 3, 4, 5), 'washing machine']
>>> D['learn python'] = 'a cool meetup group'
>>> len(D)
4
>>> D[mylist] = 'a list I like'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> del D['alligator']
>>> D
{'learn python': 'a cool meetup group', (1, 2, 3, 4, 5): 'a tuple we know and love', 'washing machine': 'useful timesaver'}
>>> import pprint
>>> pprint.pprint
<function pprint at 0x10875aaa0>
>>> pprint.pprint(D)
{'learn python': 'a cool meetup group',
 'washing machine': 'useful timesaver',
 (1, 2, 3, 4, 5): 'a tuple we know and love'}
>>> del D[(1,2,3,4,5)]
>>> pprint.pprint(D)
{'learn python': 'a cool meetup group', 'washing machine': 'useful timesaver'}
>>> S = set(
... )
>>> 
>>> 
>>> 
>>> S = set()
>>> S
set([])
>>> S.add('alligator')
>>> S
set(['alligator'])
>>> S.add('triangle')
>>> S.add('chicken')
>>> 'chicken' in S
True
>>> 'alligator' in D
False
>>> 'learn python' in D
True
>>> D
{'learn python': 'a cool meetup group', 'washing machine': 'useful timesaver'}
>>> 'a cool meetup group' in D
False
>>> D.values()
['a cool meetup group', 'useful timesaver']
>>> 'a cool meetup group' in D.values()
True
>>> 'triangle' in S
True
>>> 'square' in S
False
>>> atx_regions = {}
>>> atx_regions['south austin'] = ['bike path','SoCo shopping district','hippies']
>>> atx_regions
{'south austin': ['bike path', 'SoCo shopping district', 'hippies']}
>>> 'hippies' in atx_regions['south austin']
True
>>> atx_regions['east austin'] = ['hippies','gangstas']
>>> atx_regions
{'east austin': ['hippies', 'gangstas'], 'south austin': ['bike path', 'SoCo shopping district', 'hippies']}
>>> atx_regions.values()
[['hippies', 'gangstas'], ['bike path', 'SoCo shopping district', 'hippies']]
>>> atx_regions
{'east austin': ['hippies', 'gangstas'], 'south austin': ['bike path', 'SoCo shopping district', 'hippies']}
>>> atx_regions.items()
[('east austin', ['hippies', 'gangstas']), ('south austin', ['bike path', 'SoCo shopping district', 'hippies'])]
>>> pprint.pprint(_)
[('east austin', ['hippies', 'gangstas']),
 ('south austin', ['bike path', 'SoCo shopping district', 'hippies'])]
>>> [key for key, value in atx_regions if 'hippies' in value]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: too many values to unpack
>>> [key for key, value in atx_regions.items() if 'hippies' in value]
['east austin', 'south austin']
>>> [value for key, value in atx_regions.items() if 'hippies' in value]
[['hippies', 'gangstas'], ['bike path', 'SoCo shopping district', 'hippies']]
>>> [[v.capitalize() for v in value] for key, value in atx_regions.items() if 'hippi
[['Hippies', 'Gangstas'], ['Bike path', 'Soco shopping district', 'Hippies']]
>>> S
set(['alligator', 'chicken', 'triangle'])
>>> S.add('hippie')
>>> S.add('gangsta')
>>> S.add('meetup group')
>>> S
set(['triangle', 'hippie', 'alligator', 'chicken', 'gangsta', 'meetup group'])
>>> L = list(S)
>>> L
['triangle', 'hippie', 'alligator', 'chicken', 'gangsta', 'meetup group']
>>> L.append('hippie')
>>> L.append('hippie')
>>> L.append('hippie')
>>> L.append('hippie')
>>> L.append('hippie')
>>> L.append('hippie')
>>> L.append('hippie')
>>> L.append('hippie')
>>> L.append('hippie')
>>> L.append('hippie')
>>> L
['triangle', 'hippie', 'alligator', 'chicken', 'gangsta', 'meetup group', 'hippie', 'hippie', 'hippie', 'hippie', 'hippie', 'hippie', 'hippie', 'hippie', 'hippie', 'hippie']
>>> L[12]
'hippie'
>>> L[12] = 'yuppie'
>>> L
['triangle', 'hippie', 'alligator', 'chicken', 'gangsta', 'meetup group', 'hippie', 'hippie', 'hippie', 'hippie', 'hippie', 'hippie', 'yuppie', 'hippie', 'hippie', 'hippie']
>>> S2 = set(L)
>>> S2
set(['triangle', 'hippie', 'alligator', 'yuppie', 'chicken', 'gangsta', 'meetup group'])
>>> L2 = list(S2)
>>> L2
['triangle', 'hippie', 'alligator', 'yuppie', 'chicken', 'gangsta', 'meetup group']
>>> 'alligator' in S2
True
>>> 'alligator' in L2
True
>>> 'meetup group' in L2
True
>>> 'myspace page' in L2
False
>>> S2
set(['triangle', 'hippie', 'alligator', 'yuppie', 'chicken', 'gangsta', 'meetup group'])
>>> S1 = [1,2,3,4]
>>> S2 = [3,4,5,6]
>>> S1.intersection(S2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'intersection'
>>> S1 = set([1,2,3,4])
>>> S2 = {3,4,5,6}
>>> S2
set([3, 4, 5, 6])
>>> S1
set([1, 2, 3, 4])
>>> S1.intersection(S2)
set([3, 4])
>>> S3 = {3,6}
>>> S1.intersection(S2,S3)
set([3])
>>> S1.difference(S2)
set([1, 2])
>>> S2.difference(S1)
set([5, 6])
>>> S1.isdisjoint(S2)
False
>>> S2.isdisjoint(S1)
False
>>> S1
set([1, 2, 3, 4])
>>> S2
set([3, 4, 5, 6])
>>> del S1[3]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'set' object doesn't support item deletion
>>> S1.remove
<built-in method remove of set object at 0x108744220>
>>> S1.remove(3)
>>> S1.remove(4)
>>> S1
set([1, 2])
>>> S2
set([3, 4, 5, 6])
>>> S1.isdisjoint(S2)
True
>>> S1.issubset(S2)
False
>>> S2
set([3, 4, 5, 6])
>>> S2.add(1)
>>> S2.add(2)
>>> S2
set([1, 2, 3, 4, 5, 6])
>>> S1.issubset(S2)
True
>>> S2.issuperset(S1)
True
>>> S1.difference(S2)
set([])
>>> S2.difference(S1)
set([3, 4, 5, 6])
>>> S1.add('zebra')
>>> S1
set([1, 2, 'zebra'])
>>> S2
set([1, 2, 3, 4, 5, 6])
>>> S1.symmetric_difference(S2)
set([3, 4, 5, 6, 'zebra'])
>>> S1.difference(S2)
set(['zebra'])
>>> S2.difference(S1)
set([3, 4, 5, 6])
>>> S1.union(S2)
set([1, 2, 3, 4, 5, 6, 'zebra'])
>>> S2
set([1, 2, 3, 4, 5, 6])
>>> S2.clear()
>>> S2
set([])
>>> S1
set([1, 2, 'zebra'])
>>> S2.update(S1)
>>> S2
set([1, 2, 'zebra'])
>>> S2.update({'more','things','to','add'})
>>> S2
set([1, 2, 'zebra', 'to', 'things', 'add', 'more'])
>>> D
{'learn python': 'a cool meetup group', 'washing machine': 'useful timesaver'}
>>> S2
set([1, 2, 'zebra', 'to', 'things', 'add', 'more'])
>>> frozenset
<type 'frozenset'>
>>> frozenset(S2)
frozenset([1, 2, 'zebra', 'to', 'things', 'add', 'more'])
>>> F = _
>>> F
frozenset([1, 2, 'zebra', 'to', 'things', 'add', 'more'])
>>> D[F] = 'a set we used as an example'
>>> D
{'learn python': 'a cool meetup group', frozenset([1, 2, 'zebra', 'to', 'things', 'add', 'more']): 'a set we used as an example', 'washing machine': 'useful timesaver'}
>>> pprint.pprint(D)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pprint.py", line 56, in pprint
    printer.pprint(object)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pprint.py", line 114, in pprint
    self._format(object, self._stream, 0, 0, {}, 0)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pprint.py", line 137, in _format
    rep = self._repr(object, context, level - 1)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pprint.py", line 230, in _repr
    self._depth, level)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pprint.py", line 242, in format
    return _safe_repr(object, context, maxlevels, level)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pprint.py", line 284, in _safe_repr
    for k, v in _sorted(object.items()):
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pprint.py", line 79, in _sorted
    return sorted(iterable)
TypeError: can only compare to a set
>>> 
>>> 
>>> 
>>> D
{'learn python': 'a cool meetup group', frozenset([1, 2, 'zebra', 'to', 'things', 'add', 'more']): 'a set we used as an example', 'washing machine': 'useful timesaver'}
>>> F2 = set()
>>> F2.update({'zebra','things','to','more',2,1,'add'})
>>> F2
set([1, 2, 'zebra', 'to', 'things', 'add', 'more'])
>>> D[F2] = 'either a different thing or the same things'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'set'
>>> F2 = frozenset(F2)
>>> F2
frozenset([1, 2, 'zebra', 'to', 'things', 'add', 'more'])
>>> F
frozenset([1, 2, 'zebra', 'to', 'things', 'add', 'more'])
>>> D[F2] = 'either a different thing or the same things'
>>> D
{'learn python': 'a cool meetup group', frozenset([1, 2, 'zebra', 'to', 'things', 'add', 'more']): 'either a different thing or the same things', 'washing machine': 'useful timesaver'}
>>> print 'hello'
hello
>>> print('hello')
hello
>>> D
{'learn python': 'a cool meetup group', frozenset([1, 2, 'zebra', 'to', 'things', 'add', 'more']): 'either a different thing or the same things', 'washing machine': 'useful timesaver'}
>>> del(D['learn python'])
>>> D
{frozenset([1, 2, 'zebra', 'to', 'things', 'add', 'more']): 'either a different thing or the same things', 'washing machine': 'useful timesaver'}
>>> def add3(x,y,z):
...     return x+y+z
... 
>>> add3(3,3,2)
8
>>> add3
<function add3 at 0x10875a7d0>
>>> add3(1,5,8)
14
>>> 
>>> O = [1,2,3]
>>> O.append(5)
>>> import collections
>>> collections.OrderedDict
<class 'collections.OrderedDict'>
>>> L = [1,2,3]
>>> OD = collections.OrderedDict()
>>> OD
OrderedDict()
>>> OD['apple'] = 'a tasty fruit for keeping doctors away'
>>> OD['banana'] = 'a curvy one'
>>> OD
OrderedDict([('apple', 'a tasty fruit for keeping doctors away'), ('banana', 'a curvy one')])
>>> OD[0]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 0
>>> OD.items()
[('apple', 'a tasty fruit for keeping doctors away'), ('banana', 'a curvy one')]
>>> OD.items()[0]
('apple', 'a tasty fruit for keeping doctors away')
>>> OD.items()[1]
('banana', 'a curvy one')
>>> 
>>> 
>>> 
>>> 
>>> 
>>> class Person():
...     def __call__():
...             print "hi, I'm " + 
  File "<stdin>", line 3
    print "hi, I'm " + 
                      ^
SyntaxError: invalid syntax
>>> class Person():
...     name
...     def __call__(self):
...             print "hi, I'm " + self.name
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in Person
NameError: name 'name' is not defined
>>> class Person():
...     def __call__(self):
...             print "hi, I'm " + self.name
...     
>>> 
>>> class Person(obj):
...     def __init__(self,n):
...             self.name = n
...     
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'obj' is not defined
>>> class Person(object):
...     def __init__(self,n):
...             self.name = n
... 
>>> Abe = Person('Abe')
>>> Abe.name
'Abe'
>>> class Person(object):
...     def __init__(self,n):
...             self.name = n
...     def __call__(self):
...             print "I, I'm " + self.name
... 
>>> b = Person('Bill')
>>> b.name
'Bill'
>>> b()
I, I'm Bill
>>> 
>>> 
>>> 
>>> 
>>> 
>>> def gen1():
...     yield 3
...     yield 6
...     yield 'panda bear'
... 
>>> gen1
<function gen1 at 0x1086fa848>
>>> gen1()
<generator object gen1 at 0x10875b730>
>>> G = _
>>> G
<generator object gen1 at 0x10875b730>
>>> G.next()
3
>>> G.next()
6
>>> G.next()
'panda bear'
>>> G = gen1()
>>> G
<generator object gen1 at 0x108813410>
>>> list(G)
[3, 6, 'panda bear']
>>> G = gen1()
>>> for i in G: print i
... 
3
6
panda bear
>>> for i in [1,2,3,4,5,6]: print i
... 
1
2
3
4
5
6
>>> 
